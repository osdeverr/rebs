#
# *** Re Core Project ***
#
# This file defines the "root" project target for all Re targets.
# Its purpose is to take out some default settings that would've otherwise been hardcoded in the Re executable into an easily modifiable file.
# You can specify your own core project path while invoking re instead of using this file.
#

type: project

name: ""

enabled: true

# Re includes the C++ language provider by default
langs:
    - cpp

platform.windows: 
    vars:
        default-cxx-env: msvc
        shell: cmd /c
        sdk-tools-bin: ${env:WindowsSdkVerBinPath}/${re:host-arch}/
        vs-cmake-bin: ${env:VSINSTALLDIR}/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin
        vs-ninja-bin: ${env:VSINSTALLDIR}/Common7/IDE/CommonExtensions/Microsoft/CMake/Ninja

    env-path:
        - ${vc-tools-bin}
        - ${sdk-tools-bin}
        - ${vs-cmake-bin}
        - ${vs-ninja-bin}
        - ${re:re-data-path}/win32-helpers

    out-ext:
        target-type.executable: exe
        target-type.static-library: lib
        target-type.shared-library: dll

platform.linux|osx:
    vars:
        default-cxx-env: gcc

    out-ext:
        target-type.executable: ""
        target-type.static-library: a
        target-type.shared-library: so

platform.!windows:
    vars:
        shell: sh -c

cxx-env: ${override-cxx-env | $default-cxx-env}

#
# Custom targets do not need linking.
#
link-with:
    custom: null
    default: cpp

cxx-compile-definitions-public: {}

cxx-include-dirs: []

cxx-lib-dirs: []

cxx-build-flags:
    compiler:
        - ${platform-default-flags-compiler}
    linker:
        - ${platform-default-flags-linker}
    archiver:
        - ${platform-default-flags-archiver}

cxxenv.gcc|clang:
    cxx-standard: 2a
cxxenv.msvc|clang-cl:
    cxx-standard: latest

cxxenv.clang-cl:
    arch.x86:
        cxx-build-flags:
          compiler:
            - "-m32"
        vars:
            clang-arch-type: i686
    arch.x64:
        cxx-build-flags:
          compiler:
            - "-m64"
        vars:
            clang-arch-type: x86_64
            
    vars:
        clang-arch-flags: --target=${clang-arch-type}-win32-unknown

    cxx-build-flags:
      compiler:
        - ${clang-arch-flags}
      linker:
        - ${clang-arch-flags}

cxx-header-projection: false

inherit-caller-in-deps: true

arch.x64:
    # Conan uses x86_64 to refer to x64. Re uses x64.
    conan-arch-name: x86_64

platform.windows:
    conan-lib-suffix: .lib

platform.!windows:
    conan-lib-suffix: .a

config.debug:
    cmake-build-type: Debug
    conan-build-type: Debug

    cxx-build-options:
        debug:
    cxx-compile-definitions:
        DEBUG: 1

config.release:
    cmake-build-type: Release
    conan-build-type: Release

    cxx-compile-definitions:
        NDEBUG: 1

config.release.debinfo:
    cmake-build-type: RelWithDebInfo

cxx-build-options:
    cxx-exceptions: on

# By default, use the dynamic runtime.
runtime: dynamic
    
runtime.static:
    vcpkg-library-type: static

runtime.dynamic:
    vcpkg-library-type: dynamic

# Thanks K2Re8 for the right flags!
cxxenv.msvc|clang-cl:
    config.release:
        cxx-build-options:
            optimization: max-speed
            optimization-favor: speed

            msvc.optimization-generate-intrinsics: true
            msvc.buffer-security-check: false

            msvc.whole-program-optimization: true

            build-debug-info: true

    config.debug:
        cxx-build-options:
            msvc.runtime-library: multithreaded-dll-debug

    runtime.static:            
        config.release:
            cxx-build-options:
                msvc.runtime-library: multithreaded-static

        config.debug:
            cxx-build-options:
                msvc.runtime-library: multithreaded-static-debug
                
    runtime.dynamic:      
        config.release:
            cxx-build-options:
                msvc.runtime-library: multithreaded-dll

        config.debug:
            cxx-build-options:
                msvc.runtime-library: multithreaded-dll-debug

    cxx-build-options:
        warning-level: 3
        build-link-debug-info: true
        permissive: false
        msvc.pdb-path: $out.pdb
        

platform.emscripten:
    default-cxx-env: emscripten
    cxx-standard: 20

cxxenv.emscripten:
    out-ext: js
    
    cxx-include-dirs:
      - "${env:EMSDK}/upstream/emscripten/cache/sysroot/include"

    platform.!emscripten: unsupported

    host-platform.windows:
        emscripten-tools-cl: cmd /c emcc
        emscripten-tools-archiver: cmd /c emar
    host-platform.!windows:
        emscripten-tools-cl: sh emcc
        emscripten-tools-archiver: sh emar

c-standard: 11

features:
    - source-translation

# Make the host arch the default arch when building stuff
arch: ${re:arch | $re:host-arch}

# Important for default config inheritance. This will not spill over to user targets.
is-core-config: true

# Always generate compile_commands.json
load-context.standalone:
    tasks:
      generate-compile-commands-json:
        run: always
        silent: true
        meta-available:
          - run:
                command: python
                args:
                  [
                    "${re:re-data-path}/data/util-scripts/compile-commands-gen.py",
                    "${root-dir}/.re-cache/meta/full.json",
                    "${root-dir}/compile_commands.json",
                  ]

package-sources:
    re: https://re.plakmp.com

vcpkg-library-type: dynamic
