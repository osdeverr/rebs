#
# *** Re Core Project ***
#
# This file defines the "root" project target for all Re targets.
# Its purpose is to take out some default settings that would've otherwise been hardcoded in the Re executable into an easily modifiable file.
# You can specify your own core project path while invoking re instead of using this file.
#

type: project

name: ""

enabled: true

# Re includes the C++ language provider by default
langs:
    - cpp

platform.windows: 
    vars:
        default-cxx-env: msvc

    out-ext:
        target-type.executable: exe
        target-type.static-library: lib
        target-type.shared-library: dll

platform.linux|osx:
    vars:
        default-cxx-env: gcc

    out-ext:
        target-type.executable: ""
        target-type.static-library: a
        target-type.shared-library: so

cxx-env: ${override-cxx-env | $default-cxx-env}

#
# Custom targets do not need linking.
#
link-with:
    custom: null
    default: cpp

cxx-compile-definitions-public: {}

cxx-include-dirs: []

cxx-lib-dirs: []

cxx-build-flags:
    compiler:
        - ${platform-default-flags-compiler}
    linker:
        - ${platform-default-flags-linker}
    archiver:
        - ${platform-default-flags-archiver}

cxxenv.msvc:
    cxx-standard: latest
cxxenv.gcc|clang:
    cxx-standard: 2a

cxxenv.clang.msvc:
    arch.x86:
        vars:
            clang-arch-type: i686
    arch.x64:
        vars:
            clang-arch-type: x86_64
            
    vars:
        clang-arch-flags: --target=${clang-arch-type}-win32-unknown

    cxx-build-flags:
      compiler:
        - ${clang-arch-flags}
      linker:
        - ${clang-arch-flags}

cxx-header-projection: false

inherit-caller-in-deps: false

arch.x64:
    # Conan uses x86_64 to refer to x64. Re uses x64.
    conan-arch-name: x86_64

platform.windows:
    conan-lib-suffix: .lib

platform.!windows:
    conan-lib-suffix: .a

config.debug:
    cmake-build-type: Debug
    conan-build-type: Debug

    cxx-build-options:
        debug:
    cxx-compile-definitions:
        DEBUG: 1

config.release:
    cmake-build-type: Release
    conan-build-type: Release

    cxx-compile-definitions:
        NDEBUG: 1

config.release.debinfo:
    cmake-build-type: RelWithDebInfo

# Thanks K2Re8 for the right flags!
cxxenv.msvc:
    config.release:
        cxx-build-options:
            optimization: max-speed
            optimization-favor: speed

            msvc.optimization-generate-intrinsics: true
            msvc.buffer-security-check: false

            msvc.runtime-library: multithreaded-dll

            msvc.whole-program-optimization: true

    config.release.debinfo:
        cxx-build-options:
            build-debug-info: true

    config.debug:
        cxx-build-options:
            build-debug-info: true
            msvc.runtime-library: multithreaded-dll-debug

    cxx-build-options:
        warning-level: 3
        build-link-debug-info: true
        permissive: false
        msvc.pdb-path: $out.pdb
        

platform.emscripten:
    default-cxx-env: emscripten
    cxx-standard: 20

cxxenv.emscripten:
    out-ext: js
    
    cxx-include-dirs:
      - "${env:EMSDK}/upstream/emscripten/cache/sysroot/include"

    platform.!emscripten: unsupported

    host-platform.windows:
        emscripten-tools-cl: cmd /c emcc
        emscripten-tools-archiver: cmd /c emar
    host-platform.!windows:
        emscripten-tools-cl: sh emcc
        emscripten-tools-archiver: sh emar

c-standard: 11
