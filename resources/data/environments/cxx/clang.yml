#
# This file defines a Re build environment for the MSVC toolchain.
# The built-in C/C++ language provider is "taught" to use MSVC using this build environment.
#

#
# Inherits from the specified build environment - in this example, the 'generic' C++ build environment
#
inherits:
    - generic

use-rspfiles: false

vars:
    arch: ${target:arch | $re:arch | $re:host-arch}

    #vc-tools-root: ${env:VCToolsInstallDir | .}
    #vc-tools-bin: ${vc-tools-root}/bin/Host${re:host-arch}/${arch}
    #
    #vc-tools-cl: ${vc-tools-bin}/cl.exe
    #vc-tools-link: ${vc-tools-bin}/link.exe
    #vc-tools-archiver: ${vc-tools-bin}/lib.exe
#
#windows-kits-root: ${env:WindowsSdkDir | .}
#windows-kits-ver: ${env:WindowsSDKLibVersion | 0}
#windows-kits-lib-path: ${windows-kits-root}/lib/${windows-kits-ver}
#
#platform-link-paths: /LIBPATH:"${vc-tools-root}/lib/${arch}" /LIBPATH:"${windows-kits-lib-path}/um/${arch}" /LIBPATH:"${windows-kits-lib-path}/ucrt/$#{arch}"

#
# Specifies the paths to build tools. Can be absolute or relative - it doesn't matter - but the paths obviously need to resolve properly.
#
tools:
    compiler: ${clang-compiler-path | $env:RE_COMPILER_PATH | $clang-tools-compiler       | clang++}
    linker: ${clang-linker-path | $env:RE_LINKER_PATH | $clang-tools-linker       | lld-link}
    archiver: ${clang-archiver-path | $env:RE_ARCHIVER_PATH | $clang-tools-archiver | llvm-ar}

#
# Default tool invoke flags. Can be overridden in targets using the 'build-flags' map property.
#
default-flags:
    compiler: "" #"/nologo /showIncludes /interface /experimental:module /EHsc /MD"
    linker: "" #"/nologo /ignore:4006 ${platform-link-paths} /MACHINE:${arch}"

#
# Platform-specific C preprocessor macros. They will be defined in all source files using this environment.
#
platform-definitions:
    #WIN32: true
    #NOMINMAX: true

#
# Templates for the build system's rules and other stuff.
#
templates:
    cxx-standard: "-std=c++{version}"
    c-standard: "-std=c{version}"

    compiler-cmdline: "{flags} -c {input} -o {output}"
    linker-cmdline: "{flags} -o {output} {input} {link_deps} {global_link_deps}"
    archiver-cmdline: "{flags} -crs {output} {input} {link_deps}"

    cxx-module-output: "" # "/ifcOutput {directory}"
    cxx-module-lookup-dir: "" # "/ifcSearchDir {directory}"
    cxx-include-dir: '-I"{directory}"'
    cxx-lib-dir: '-D"{directory}"'

    cxx-compile-definition: "-D{name}={value}"
    cxx-compile-definition-no-value: "-D{name}"

    link-as-shared-library: "-shared"

    compile-as-c: "-x c"
    compile-as-cpp: "-x cpp"

#
# Default file extensions for build outputs.
# Can be overridden using the 'output-extension' property in targets.
#
default-extensions:
    object: o

#
# The keys and values from this field will be appended verbatim to all rules created using this build environment.
# Here, we make sure the underlying build system (Ninja in particular) knows we're building with GCC and works with header deps accordingly.
#
custom-rule-vars:
    deps: gcc
    depfile: $out.d

option-rules:
    arch:
        target-vars:
            arch: ${value}

        linker-append-cmdline: /MACHINE:${arch}
        archiver-append-cmdline: /MACHINE:${arch}

build-options:
    cxx-exceptions:
        on: {}
        off: {}
