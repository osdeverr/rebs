#
# This file defines a Re build environment for the MSVC toolchain.
# The built-in C/C++ language provider is "taught" to use MSVC using this build environment.
#

#
# Inherits from the specified build environment - in this example, the 'generic' C++ build environment 
#
inherits:
    - generic

use-rspfiles: true

vars:
    arch: ${target:arch | $re:arch | $env:VSCMD_ARG_TGT_ARCH}

    vc-tools-root: ${env:VCToolsInstallDir | .}
    vc-tools-bin: ${vc-tools-root}/bin/Host${re:host-arch}/${arch}
    
    vc-tools-cl: ${vc-tools-bin}/cl.exe
    vc-tools-link: ${vc-tools-bin}/link.exe
    vc-tools-archiver: ${vc-tools-bin}/lib.exe

    windows-kits-root: ${env:WindowsSdkDir | .}
    windows-kits-ver: ${env:WindowsSDKLibVersion | 0}
    windows-kits-lib-path: ${windows-kits-root}/lib/${windows-kits-ver}

    platform-link-paths: /LIBPATH:"${vc-tools-root}/lib/${arch}" /LIBPATH:"${windows-kits-lib-path}/um/${arch}" /LIBPATH:"${windows-kits-lib-path}/ucrt/${arch}"

#
# Specifies the paths to build tools. Can be absolute or relative - it doesn't matter - but the paths obviously need to resolve properly.
#
tools:
    compiler:  ${msvc-compiler-path | $env:RE_MSVC_COMPILER_PATH | $vc-tools-cl       | cl.exe}
    linker:    ${msvc-linker-path   | $env:RE_MSVC_LINKER_PATH   | $vc-tools-link     | link.exe}
    archiver:  ${msvc-archiver-path | $env:RE_MSVC_ARCHIVER_PATH | $vc-tools-archiver | lib.exe}

#
# Default tool invoke flags. Can be overridden in targets using the 'build-flags' map property.
#
default-flags:
    compiler:  "/nologo /showIncludes /interface /experimental:module /EHsc"
    linker:    "/nologo /ignore:4006"

#
# Platform-specific C preprocessor macros. They will be defined in all source files using this environment.
#
platform-definitions:
    WIN32: true
    NOMINMAX: true

#
# Templates for the build system's rules and other stuff.
#
templates:
    cxx-standard: "/std:c++{version}"

    compiler-cmdline: "{flags} /c {input} /Fo:{output}"
    linker-cmdline: "/MACHINE:${arch} ${platform-link-paths} {flags} {link_deps} {input} /OUT:{output}"
    archiver-cmdline: "/MACHINE:${arch} ${platform-link-paths} {flags} {link_deps} {input} /OUT:{output}"

    cxx-module-output: "/ifcOutput {directory}"
    cxx-module-lookup-dir: "/ifcSearchDir {directory}"
    cxx-include-dir: "/I \"{directory}\""
    cxx-lib-dir: "/LIBPATH:\"{directory}\""

    cxx-compile-definition: "/D{name}={value}"
    cxx-compile-definition-no-value: "/D{name}"

    link-as-shared-library: "/DLL"

#
# Default file extensions for build outputs.
# Can be overridden using the 'output-extension' property in targets.
#
default-extensions:
    object: obj
    executable: exe
    static-library: lib
    shared-library: dll
    
#
# The keys and values from this field will be appended verbatim to all rules created using this build environment.
# Here, we make sure the underlying build system (Ninja in particular) knows we're building with MSVC and works with header deps accordingly.
#
custom-rule-vars:
    deps: msvc

option-rules:
    arch:
        target-vars:
            arch: ${value}

        linker-append-cmdline: /MACHINE:${arch}
        archiver-append-cmdline: /MACHINE:${arch}
